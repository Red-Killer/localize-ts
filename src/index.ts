import { readFileSync, writeFileSync } from "fs";
import { resolve } from "path";
import { Command } from "commander";

type TranslationObject = {
  [key: string]: string | TranslationObject;
};

function extractVars(text: string): string[] {
  const regex = /{{(.*?)}}/g;
  const matches = text.match(regex);
  return matches ? matches.map((m) => m.slice(2, -2)) : [];
}

function genType(obj: TranslationObject, lvl = 1): string {
  const indent = "  ".repeat(lvl);
  let typeDef = "{\n";

  for (const key in obj) {
    const value = obj[key];
    if (typeof value === "object")
      typeDef += `${indent}${key}: ${genType(value, lvl + 1)};\n`;
    else if (typeof value === "string") {
      const variables = extractVars(value);
      if (variables.length > 0) {
        const params = variables.map((v) => `${v}: string`).join("; ");
        typeDef += `${indent}${key}: (params: { ${params} }) => string;\n`;
      } else typeDef += `${indent}${key}: string;\n`;
    }
  }

  typeDef += "  ".repeat(lvl - 1) + "}";
  return typeDef;
}

const program = new Command();

program
  .requiredOption("-f, --file <path>", "path to the input JSON file")
  .requiredOption("-o, --output <path>", "path to the output declaration file");

program.parse(process.argv);

const options = program.opts();

const outputPath = options.output;

function main() {
  const local = JSON.parse(readFileSync(resolve(options.file), "utf-8"));
  const typeDef = `// GENERATED BY LOCALIZE-TS\n\nexport interface Translations ${genType(
    local
  )}\n`;

  writeFileSync(outputPath, typeDef);
  console.log("Declaration file generated!");
}

main();
