import { readFileSync, writeFileSync } from "fs";
import { resolve } from "path";
import { Command } from "commander";

type TranslationObject = { [key: string]: string | TranslationObject };

const extractVars = (text: string): string[] =>
  (text.match(/{{(.*?)}}/g) || []).map((m) => m.slice(2, -2));

const genType = (obj: TranslationObject, parentKey = ""): string =>
  Object.entries(obj).reduce((typeDef, [key, value]) => {
    const fullKey = parentKey ? `${parentKey}.${key}` : key;
    const formattedKey = fullKey.includes(".") ? `"${fullKey}"` : fullKey;

    if (typeof value === "object") return typeDef + genType(value, fullKey);
    else if (typeof value === "string") {
      const variables = extractVars(value);
      return (
        typeDef +
        `  ${formattedKey}: ${
          variables.length > 0
            ? `{ ${variables.map((v) => `${v}: string`).join("; ")} }`
            : "string"
        };\n`
      );
    }
    return typeDef;
  }, "");

const program = new Command()
  .requiredOption("-f, --file <path>", "path to the input JSON file")
  .requiredOption("-o, --output <path>", "path to the output declaration file")
  .parse(process.argv);

const opts = program.opts();

const local = JSON.parse(readFileSync(resolve(opts.file), "utf-8"));
const typeDef = `// GENERATED BY LOCALIZE-TS\n\nexport interface Translations {\n${genType(
  local
)}}\n`;

writeFileSync(opts.output, typeDef);
console.log("Declaration file generated!");
